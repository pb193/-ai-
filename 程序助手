import os
import threading
import queue
import asyncio
import aiohttp
from pathlib import Path
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import send2trash
import psutil
import winreg
import json
from fuzzywuzzy import fuzz
import atexit

# 缓存和关键定义
CACHE_FILE = Path("folder_cache.json")
folder_cache = {}
known_folders = {}
PROTECTED_FOLDER_NAMES = {'windows', 'program files', 'program files (x86)', 'system volume information'}


# 加载缓存
def load_cache():
    global known_folders, folder_cache
    if CACHE_FILE.exists():
        with open(CACHE_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            known_folders.update({k: tuple(v) for k, v in data.get('known_folders', {}).items()})
            folder_cache.update(data.get('folder_cache', {}))
        print(f"已加载缓存: {len(known_folders)} 个已知文件夹, {len(folder_cache)} 个文件夹缓存")


# 保存缓存
def save_cache():
    data = {
        'known_folders': {k: list(v) for k, v in known_folders.items()},  # tuple转为list以便JSON序列化
        'folder_cache': folder_cache
    }
    with open(CACHE_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
    print("已保存缓存")


# 获取已安装应用列表
def get_installed_apps():
    installed_apps = {}
    reg_paths = [
        r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall",
        r"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    ]
    for reg_path in reg_paths:
        try:
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, reg_path)
            for i in range(winreg.QueryInfoKey(key)[0]):
                subkey_name = winreg.EnumKey(key, i)
                subkey = winreg.OpenKey(key, subkey_name)
                try:
                    app_name = winreg.QueryValueEx(subkey, "DisplayName")[0]
                    install_location = winreg.QueryValueEx(subkey, "InstallLocation")[0]
                    publisher = winreg.QueryValueEx(subkey, "Publisher")[0] if "Publisher" in [
                        winreg.EnumValue(subkey, j)[0] for j in range(winreg.QueryInfoKey(subkey)[1])] else "未知公司"
                    if app_name and install_location:
                        installed_apps[app_name.lower()] = (install_location.lower(), publisher)
                        print(f"注册表找到应用: {app_name} -> {install_location} ({publisher})")
                except OSError:
                    pass
                winreg.CloseKey(subkey)
            winreg.CloseKey(key)
        except OSError:
            continue
    return installed_apps


# 异步 API 调用
async def async_api_call(prompt, session):
    payload = {
        "model": "qwen-plus",
        "messages": [
            {"role": "system",
             "content": "你是一个文件系统分析助手，擅长根据文件夹名称和上下文判断其所属公司、应用及其用途。请返回置信度高的结果，并附上置信度百分比。"},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 1000
    }
    headers = {"Authorization": ""}#改成自己的api即可这是阿里云的 自己改一下就可以用
    try:
        async with session.post("https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions", json=payload,
                                headers=headers) as resp:
            result = await resp.json()
            content = result["choices"][0]["message"]["content"].strip()
            print(f"API 返回: {content}")
            return content
    except Exception as e:
        print(f"API 调用失败: {e}")
        return ""


# 获取文件夹大小
def get_folder_size(folder_path):
    total_size = 0
    try:
        for dirpath, _, filenames in os.walk(folder_path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                total_size += os.path.getsize(fp)
    except Exception:
        pass
    return total_size / 1024  # 返回 KB


# AI 扩充 known_folders
async def expand_known_folders():
    global known_folders
    if known_folders:  # 如果已有缓存，则跳过初始化
        return
    prompt = (
        "请列出常见的软件安装文件夹名称及其归属信息，包括公司名称、应用名称和用途。\n"
        "仅提供文件夹名称（无需完整路径），返回格式为：文件夹名称:公司名称:应用名称:用途，每行一个。\n"
        "示例：\n"
        "epic games:Epic Games, Inc.:Epic Games Launcher:游戏平台\n"
        "steam:Valve Corporation:Steam:游戏平台\n"
        "anaconda:Anaconda, Inc.:Anaconda:Python 数据科学平台\n"
        "提供至少 30 个常见文件夹的示例，确保包含游戏、办公、开发工具和系统相关文件夹。"
    )
    async with aiohttp.ClientSession() as session:
        result = await async_api_call(prompt, session)
        if result:
            for line in result.split('\n'):
                if ':' in line:
                    parts = line.split(':', 3)
                    if len(parts) == 4:
                        folder_name, company, app, purpose = parts
                        folder_name = folder_name.strip().lower()
                        known_folders[folder_name] = (company.strip(), app.strip(), purpose.strip())
            save_cache()
            print(f"已从 AI 获取 {len(known_folders)} 个已知文件夹")


# 根据文件夹名称猜测归属（优化版）
def guess_folder_owner(folder_name):
    folder_name_lower = folder_name.lower()

    # 1. 检查 known_folders（模糊匹配）
    for key, (company, app, purpose) in known_folders.items():
        if fuzz.ratio(key, folder_name_lower) > 80:
            print(f"模糊匹配到已知文件夹: {folder_name_lower} -> {company} - {app} - {purpose}")
            return company, app, purpose

    # 2. Fallback: 使用简易规则
    simple_guesses = {
        'epic': ('Epic Games, Inc.', 'Epic Games Launcher', '游戏平台'),
        'steam': ('Valve Corporation', 'Steam', '游戏平台'),
        # ...（保留原有的 simple_guesses 内容，略去以节省篇幅）
    }
    for key, (company, app, purpose) in simple_guesses.items():
        if key in folder_name_lower:
            print(f"Fallback 匹配: {folder_name_lower} -> {company} - {app} - {purpose}")
            return company, app, purpose

    # 3. 检查子目录或文件
    folder_path = Path(folder_name)
    if folder_path.is_dir():
        for item in folder_path.iterdir():
            if item.is_file() and item.suffix == '.exe':
                return '未知公司', item.name, '可能的可执行文件'

    print(f"无法匹配文件夹: {folder_name_lower}")
    return None, None, None


# 扫描第一层文件夹并分析归属（优化版）
def scan_directories(directories, installed_apps, mode, result_queue, stop_event, update_status_callback):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    all_files_info = []

    # 收集第一层文件夹
    folder_paths = []
    for directory in directories:
        if stop_event.is_set():
            result_queue.put(("stopped", "用户终止扫描"))
            return
        try:
            folder_paths.extend(
                os.path.join(directory, d) for d in os.listdir(directory) if os.path.isdir(os.path.join(directory, d)))
        except Exception as e:
            update_status_callback(f"无法访问 {directory}: {e}")
            continue

    if not folder_paths:
        result_queue.put(("success", [], {}))
        return

    # AI 分析文件夹归属（优化版）
    async def ai_analyze_folders(folder_paths):
        results = {}
        unknown_folders = []

        # 本地规则优先匹配
        for fp in folder_paths:
            fp_lower = fp.lower()
            folder_name = os.path.basename(fp).lower()

            # 1. 检查缓存
            if fp in folder_cache:
                results[fp] = folder_cache[fp]
                print(f"缓存命中: {fp} -> {folder_cache[fp]}")
                continue

            # 2. 检查注册表
            for app_name, (app_path, publisher) in installed_apps.items():
                if fp_lower.startswith(app_path) or fp_lower == app_path:
                    results[fp] = {
                        'type': f'{publisher} - {app_name} - 未知用途',
                        'impact': '高影响，谨慎删除',
                        'priority': '低',
                        'owner': app_name
                    }
                    folder_cache[fp] = results[fp]  # 更新缓存
                    print(f"注册表匹配: {fp} -> {app_name} ({publisher})")
                    break
            else:
                # 3. 根据名称猜测
                company, app, purpose = guess_folder_owner(folder_name)
                if company and app:
                    results[fp] = {
                        'type': f'{company} - {app} - {purpose}',
                        'impact': '高影响，谨慎删除',
                        'priority': '低',
                        'owner': f'{company} ({app})'
                    }
                    folder_cache[fp] = results[fp]  # 更新缓存
                elif folder_name not in PROTECTED_FOLDER_NAMES:
                    results[fp] = {
                        'type': '未知公司 - 未知应用 - 未知用途',
                        'impact': '低影响，可删除',
                        'priority': '高',
                        'owner': '未知'
                    }
                    unknown_folders.append(fp)

        # AI 分析未知文件夹
        if unknown_folders:
            update_status_callback(f"AI 分析 {len(unknown_folders)} 个未知文件夹...")
            prompt = (
                    "分析以下文件夹路径，判断其所属公司、应用及用途，并附上置信度（如 90%）。\n"
                    "返回格式为：路径:公司名称:应用名称:用途:置信度\n"
                    "文件夹列表：\n" + "\n".join(unknown_folders[:20])  # 限制批量分析数量，避免超限
            )
            async with aiohttp.ClientSession() as session:
                result = await async_api_call(prompt, session)
                if result:
                    for line in result.split('\n'):
                        if ':' in line:
                            parts = line.split(':', 4)
                            if len(parts) == 5:
                                fp, company, app, purpose, confidence = parts
                                fp = fp.strip()
                                confidence = float(confidence.strip('%')) if confidence.strip('%').replace('.',
                                                                                                           '').isdigit() else 0
                                if confidence >= 80:
                                    results[fp] = {
                                        'type': f'{company.strip()} - {app.strip()} - {purpose.strip()}',
                                        'impact': '高影响，谨慎删除',
                                        'priority': '低',
                                        'owner': f'{company.strip()} ({app.strip()})'
                                    }
                                    known_folders[os.path.basename(fp).lower()] = (
                                    company.strip(), app.strip(), purpose.strip())
                                else:
                                    results[fp] = {
                                        'type': '未知公司 - 未知应用 - 未知用途',
                                        'impact': '低影响，可删除',
                                        'priority': '高',
                                        'owner': '未知'
                                    }
                                folder_cache[fp] = results[fp]  # 更新缓存

        # 填充剩余未分析的文件夹
        for fp in folder_paths:
            if fp not in results:
                results[fp] = {
                    'type': '未知公司 - 未知应用 - 未知用途',
                    'impact': '未知影响，建议保留',
                    'priority': '低',
                    'owner': '未知'
                }
                folder_cache[fp] = results[fp]
        save_cache()  # 保存缓存
        return results

    try:
        analysis_results = loop.run_until_complete(ai_analyze_folders(folder_paths))
        for fp, analysis in analysis_results.items():
            size = get_folder_size(fp)
            all_files_info.append({
                'path': fp,
                'type': analysis['type'],
                'impact': analysis['impact'],
                'priority': analysis['priority'],
                'owner': analysis['owner'],
                'size': size
            })
    except Exception as e:
        result_queue.put(("error", str(e)))
        return

    result_queue.put(("success", all_files_info, {}))
    loop.close()


# 检查文件是否被占用
def is_file_in_use(file_path):
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            for item in proc.open_files():
                if item.path == file_path:
                    return True
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return False


# 删除文件或文件夹
def delete_files(selected_files, update_status_callback):
    for file in selected_files:
        try:
            if os.path.isfile(file) and is_file_in_use(file):
                update_status_callback(f"跳过: {file} - 文件正在使用中")
                continue
            send2trash.send2trash(file)
            update_status_callback(f"已移至回收站: {file}")
        except Exception as e:
            update_status_callback(f"操作失败: {file} - {e}")


# GUI界面（优化版）
class CleanerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("文件夹归属分析工具")
        self.root.geometry("1000x700")

        load_cache()
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(expand_known_folders())
        loop.close()

        tk.Label(root, text="扫描路径（仅第一层文件夹）:").pack(pady=5)
        self.path_frame = tk.Frame(root)
        self.path_frame.pack(fill=tk.X, padx=5)
        self.path_entry = tk.Entry(self.path_frame, width=50)
        self.path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        tk.Button(self.path_frame, text="选择文件夹", command=self.select_folder).pack(side=tk.RIGHT)

        self.button_frame = tk.Frame(root)
        self.button_frame.pack(pady=5)
        self.scan_button = tk.Button(self.button_frame, text="开始AI扫描", command=self.start_scan)
        self.scan_button.pack(side=tk.LEFT, padx=5)
        self.stop_button = tk.Button(self.button_frame, text="停止扫描", command=self.stop_scan, state='disabled')
        self.stop_button.pack(side=tk.LEFT, padx=5)
        self.select_by_priority_button = tk.Button(self.button_frame, text="根据建议选择",
                                                   command=self.select_by_priority)
        self.select_by_priority_button.pack(side=tk.LEFT, padx=5)
        self.delete_by_priority_button = tk.Button(self.button_frame, text="根据建议批量删除",
                                                   command=self.delete_by_priority)
        self.delete_by_priority_button.pack(side=tk.LEFT, padx=5)

        self.progress_label = tk.Label(root, text="提示：选择路径后开始扫描")
        self.progress_label.pack(pady=5)

        self.tree_frame = tk.Frame(root)
        self.tree_frame.pack(fill=tk.BOTH, expand=True)
        self.tree_scroll = ttk.Scrollbar(self.tree_frame)
        self.tree_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree = ttk.Treeview(self.tree_frame, columns=('选择', '路径', '归属', '影响', '优先级', '大小(KB)'),
                                 show='headings', yscrollcommand=self.tree_scroll.set)
        self.tree_scroll.config(command=self.tree.yview)
        self.tree.heading('选择', text='选择')
        self.tree.heading('路径', text='文件夹路径')
        self.tree.heading('归属', text='归属 (公司 - 应用 - 用途)')
        self.tree.heading('影响', text='删除影响')
        self.tree.heading('优先级', text='清理优先级')
        self.tree.heading('大小(KB)', text='大小(KB)')
        self.tree.column('选择', width=50, anchor='center')
        self.tree.column('路径', width=300)
        self.tree.column('归属', width=400)
        self.tree.column('影响', width=150)
        self.tree.column('优先级', width=80)
        self.tree.column('大小(KB)', width=80)
        self.tree.pack(fill=tk.BOTH, expand=True)

        self.tree.bind('<Button-1>', self.toggle_checkbox)
        self.tree.bind('<Motion>', self.show_tooltip)

        self.selected_files = set()
        tk.Button(root, text="删除选中项（移至回收站）", command=self.delete_selected).pack(pady=5)

        self.scan_queue = queue.Queue()
        self.stop_event = threading.Event()
        self.scan_thread = None
        self.installed_apps = get_installed_apps()
        self.tooltip = None

        atexit.register(save_cache)

    def show_tooltip(self, event):
        item = self.tree.identify_row(event.y)
        if not item:
            if self.tooltip:
                self.tooltip.destroy()
                self.tooltip = None
            return
        column = self.tree.identify_column(event.x)
        if column == '#3':
            values = self.tree.item(item, 'values')
            if values and len(values) > 2:
                text = values[2]
                if self.tooltip:
                    self.tooltip.destroy()
                self.tooltip = tk.Toplevel(self.root)
                self.tooltip.wm_overrideredirect(True)
                self.tooltip.wm_geometry(f"+{event.x_root + 10}+{event.y_root + 10}")
                label = tk.Label(self.tooltip, text=text, background="yellow", relief="solid", borderwidth=1)
                label.pack()

    def select_folder(self):
        folder = filedialog.askdirectory(title="选择要扫描的文件夹")
        if folder:
            self.path_entry.delete(0, tk.END)
            self.path_entry.insert(0, folder)

    def update_status(self, message):
        self.progress_label.config(text=message)
        self.root.update_idletasks()

    def start_scan(self):
        base_path = self.path_entry.get()
        if not base_path or not os.path.exists(base_path):
            messagebox.showerror("错误", "请选择一个有效的文件夹！")
            return

        self.scan_button.config(state='disabled')
        self.stop_button.config(state='normal')
        self.select_by_priority_button.config(state='disabled')
        self.delete_by_priority_button.config(state='disabled')
        self.tree.delete(*self.tree.get_children())
        self.selected_files.clear()
        self.stop_event.clear()

        self.update_status("扫描第一层文件夹，分析归属中...")
        self.scan_thread = threading.Thread(
            target=scan_directories,
            args=([base_path], self.installed_apps, "residual", self.scan_queue, self.stop_event, self.update_status)
        )
        self.scan_thread.start()
        self.root.after(50, self.check_scan_result)

    def stop_scan(self):
        self.stop_event.set()
        self.update_status("正在终止扫描...")

    def toggle_checkbox(self, event):
        item = self.tree.identify_row(event.y)
        if not item:
            return
        column = self.tree.identify_column(event.x)
        if column == '#1':
            file_path = self.tree.item(item, 'tags')[0]
            current_value = self.tree.item(item, 'values')[0]
            if current_value == '✔':
                self.tree.item(item, values=('', *self.tree.item(item, 'values')[1:]))
                self.selected_files.discard(file_path)
            else:
                self.tree.item(item, values=('✔', *self.tree.item(item, 'values')[1:]))
                self.selected_files.add(file_path)

    def select_by_priority(self):
        for item in self.tree.get_children():
            priority = self.tree.item(item, 'values')[4]
            file_path = self.tree.item(item, 'tags')[0]
            if priority == '高':
                self.tree.item(item, values=('✔', *self.tree.item(item, 'values')[1:]))
                self.selected_files.add(file_path)
            else:
                self.tree.item(item, values=('', *self.tree.item(item, 'values')[1:]))
                self.selected_files.discard(file_path)
        self.update_status("已选择优先级为‘高’的文件夹")

    def delete_by_priority(self):
        high_priority_files = {self.tree.item(item, 'tags')[0] for item in self.tree.get_children() if
                               self.tree.item(item, 'values')[4] == '高'}
        if not high_priority_files:
            messagebox.showwarning("警告", "没有优先级为‘高’的文件夹可删除！")
            return
        if messagebox.askyesno("确认", f"确定将 {len(high_priority_files)} 个高优先级文件夹移至回收站吗？"):
            delete_files(high_priority_files, self.update_status)
            self.start_scan()

    def check_scan_result(self):
        try:
            status, result, _ = self.scan_queue.get_nowait()
            if status == "success":
                files_info = result
                for file in files_info:
                    item = self.tree.insert('', 'end', values=(
                        '', file['path'], file['type'], file['impact'], file['priority'], f"{file['size']:.2f}"
                    ))
                    self.tree.item(item, tags=(file['path'],))
                self.update_status(f"扫描完成，共找到 {len(files_info)} 个文件夹")
                self.scan_button.config(state='normal')
                self.stop_button.config(state='disabled')
                self.select_by_priority_button.config(state='normal')
                self.delete_by_priority_button.config(state='normal')
            elif status == "stopped":
                self.update_status("扫描已终止")
                self.scan_button.config(state='normal')
                self.stop_button.config(state='disabled')
            elif status == "error":
                messagebox.showerror("错误", f"扫描出错: {result}")
                self.update_status("扫描失败")
                self.scan_button.config(state='normal')
                self.stop_button.config(state='disabled')
        except queue.Empty:
            if self.scan_thread and self.scan_thread.is_alive():
                self.root.after(50, self.check_scan_result)
            else:
                self.update_status(f"扫描完成，共找到 {len(self.tree.get_children())} 个文件夹")
                self.scan_button.config(state='normal')
                self.stop_button.config(state='disabled')
                self.select_by_priority_button.config(state='normal')
                self.delete_by_priority_button.config(state='normal')

    def delete_selected(self):
        if not self.selected_files:
            messagebox.showwarning("警告", "未选择任何文件夹！")
            return
        high_impact_files = [f for f in self.selected_files if
                             '高影响' in self.tree.item(self.tree.tag_has(f), 'values')[3]]
        if high_impact_files and not messagebox.askyesno("警告",
                                                         f"包含 {len(high_impact_files)} 个高影响文件夹，仍然继续吗？"):
            return
        if messagebox.askyesno("确认", f"确定将 {len(self.selected_files)} 个文件夹移至回收站吗？"):
            delete_files(self.selected_files, self.update_status)
            self.start_scan()


if __name__ == "__main__":
    root = tk.Tk()
    app = CleanerApp(root)
    root.mainloop()
